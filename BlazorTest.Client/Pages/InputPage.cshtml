@using BlazorTest.Shared
@using BlazorTest.Library
@page "/input"
@inject HttpClient Http
<h1>Input</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (IsServerProc == false)
{

<div class="form-group row">
    <label for="" class="col-sm-2 col-form-label">従業員コード</label>

    <div class="col-sm-10">
        <input type="text" bind=@EmpCode ref="_inpEmpoyeeCode" class=" form-control" placeholder="数字６桁" />
    </div>
    @if (ErrorMessage.Length > 0)
    {
        <div class="col-sm-12 alert alert-danger">
          <strong>エラー：</strong>@ErrorMessage
        </div>
    }

</div>

<br />
@EmpCode<br />
<button class="btn btn-primary" onclick="@UpdateEmployee">更新</button>

}
else
{
<div>
    Server Processing...<br />
    <img src="../tenor.gif" />
</div>
}
@functions  {
    ElementRef _inpEmpoyeeCode;
    string _empCode = "1";
    bool IsServerProc = false;

    string EmpCode
    {
        get
        {
            Console.WriteLine($"property set emp code:{_empCode}");
            return _empCode;
        }
        set
        {
            Console.WriteLine($"property get emp code:{_empCode}");
            _empCode = value;
        }
    }

    bool Check()
    {
        try
        {
            ErrorMessage = "";
            Facade.Checker.Code.IsRequire(EmpCode, CodeEnum.EmployeeCode);
            EmpCode = Facade.Checker.Code.Check(EmpCode, CodeEnum.EmployeeCode);
            return true;
        }
        catch (ApplicationException ae)
        {
            ErrorMessage = ae.Message;
            return false;
        }
    }

    string ErrorMessage = "";

    async Task UpdateEmployee()
    {
        Console.WriteLine($"Employee Code:{EmpCode}");

        if (Check() == false)
        {
            _inpEmpoyeeCode.Focus();
            return;
        }
        //return;

        //List<string> code = new List<string> { EmpCode };
        //code.Add(EmpCode);

        var employee = new Employee() { Id = 1, Name = EmpCode, Birthday = DateTime.Now };
        //var content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(employee), System.Text.Encoding.UTF8, "application/json");

        //        content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
        IsServerProc = true;

        List<Employee> employees = new List<Employee>() { employee };

        var ret = await Http.PostJsonAsync<IEnumerable<string>>("api/Employees/Update", employees);

        IsServerProc = false;
        Console.WriteLine($"更新結果：{ret.Count()}");
    }

}
