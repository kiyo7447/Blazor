@using BlazorTest.Shared
@using BlazorTest.Library
@page "/input"
@inject HttpClient Http
<h1>From Application</h1>
<p>2020のアプリケーションの完成形.</p>
@if (IsServerProc == false)
{
    <div class="form-group row">
        <label for="" class="col-sm-2 col-form-label">従業員コード</label>
        <div class="col-sm-10">
            @*<ainp type="Code" repository="Employee.Code" require>@EmployeeCode</ainp>*@
            @*<ainp type="Text" repository="Employee.Name" require>@EmployeeName</ainp>*@
            @*<ainp type="Date" require>@EmpolyeeBirthday</ainp>*@
            <input type="text" bind=employee.Code ref="_inpEmpoyeeCode" class=" form-control" placeholder="数字６桁" />
        </div>
        @*@if (ErrorMessage.Length > 0)*@
        @*@if (employee.GetError(nameof(Employee.Code)).Length > 0)*@
        @if (employee.ErrorMessage.ContainsKey(nameof(Employee.Code)))
        {
            @*<aeer>@EmployeeCodeErrorMessage</aeer>*@
            <div class="col-sm-12 alert alert-danger">
                <strong>エラー：</strong>@employee.ErrorMessage[nameof(Employee.Code)]
            </div>
        }
    </div>

    <br />
    @employee.Name<br />
    <button class="btn btn-primary" onclick="@UpdateEmployee" ref="_btnSave">更新</button><br />
    <div class="form-check">
        <input type="checkbox" bind=IsClientErrorCheck class="form-check-input" />
        <label class="form-check-label" for="exampleCheck1">Client Error Check</label>
    </div>

    <button class="btn btn-primary" onclick="@GetAttribute">属性の取得</button><br />

    <button class="btn btn-primary" onclick="@ExtensionsMethod">拡張メソッド</button><br />

}
else
{
    <div>
        Server Processing...<br />
        <img src="../tenor.gif" />
    </div>
}


@functions  {
    ElementRef _inpEmpoyeeCode;
    ElementRef _btnSave;
    Employee employee = new Employee() { Id = 6, Code = "000006", Name = "hogehoge", Birthday = new DateTime(2011, 1, 17) };
    bool IsServerProc = false;
    bool IsClientErrorCheck = true;

    async Task UpdateEmployee()
    {
        //Console.WriteLine($"Employee Code:{EmpCode}");

        //DB以外の入力チェック（クライアント版）
        if (IsClientErrorCheck == true && employee.Validation() == false)
        {
            if (employee.ErrorMessage.ContainsKey(nameof(employee.Code)))
            {
                _inpEmpoyeeCode.Focus();
                return;
            }
            throw new NotImplementedException("未実装");
        }

        //var content = new StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(employee), System.Text.Encoding.UTF8, "application/json");
        //        content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

        //employee.ErrorMessage["test"] = "エラーメッセージです。";
        List<Employee> employees = new List<Employee>() { employee, employee };

        IsServerProc = true;
        var ret = await Http.PostJsonAsync<IEnumerable<Employee>>("api/Employees/Update", employees);
        IsServerProc = false;

        //_focusElement = _inpEmpoyeeCode;

        //_inpEmpoyeeCode.Focus();

        Console.WriteLine($"更新結果：{ret.Count()}");
        ret.All(e =>
        {
            Console.WriteLine($"Id:{e.Id}, Code:{e.Code}, Name:{e.Name}, Birthday:{e.Birthday}, Age:{e.Age}");
            Console.WriteLine($"e.HasError():{e.IsValid()}");
            e.ErrorMessage.All(d =>
            {
                Console.WriteLine($"key:{d.Key}, ErrorMessage:{d.Value}");
                return true;
            });
            return true;
        });
    }

    private void GetAttribute()
    {
        Attribute[] authors = Attribute.GetCustomAttributes(typeof(Employee), typeof(AuthorAttribute));

        authors.All(a =>
        {
            AuthorAttribute aa = a as AuthorAttribute;
            if (aa != null)
            {
                Console.WriteLine($"Affiliation={aa.Affiliation}, Name{aa.Name}");
            }
            else
            {
                Console.WriteLine($"属性はnullです。");

            }
            return true;
        });

    }

    private void ExtensionsMethod()
    {
        string a = "ok";

        Console.WriteLine($"{a.GetHoge("fugofugo")}");

    }
    private void OpenModal()
    {

        //myModal.modal();
    }

    protected override void OnAfterRender()
    {
        Console.Out.WriteLine($"OnAfterRender()");
        base.OnAfterRender();
    }

    protected override Task OnAfterRenderAsync()
    {
        //if (_focusElement)
        //{
        //    ((ElementRef)_focusElement).Focus();
        //    _focusElement = null;
        //}
        //if (_inpEmpoyeeCode.Equals(_focusElement)) _inpEmpoyeeCode.Focus();
        //_inpEmpoyeeCode.Focus();
        //_inpEmpoyeeCode = _btnSave;
        Console.Out.WriteLine($"OnAfterRenderAsync()");
        return base.OnAfterRenderAsync();
    }
}
